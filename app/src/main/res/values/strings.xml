<resources>
    <string name="app_name">SoundSense</string>
    <string name="whatmood">What mood are you in today?</string>
    <string name="mainexplanation">The splash screen. Depending on the user\'s current feelings, they can choose between 4 options: find musics for the mind or for the heart, also they can choose to play a random track or enter the album/play lists and browsing there.\nDifficulties/solutions: none.</string>
    <string name="heartexplanation">Music for the heart section. With the slider the user can choose their mood between the two extremity (happy and sad). During playback (in the musicplayer section), they can set a heart/mind rating of the track, that is stored. When using this section, the app looks for tracks, those have the appropriate heart rating (+/-2 hearts) and list them below. Tapping on one of them, starts the playback section. Tapping on the heart icon on the top, switches to the mind section.\nDifficulties/solutions:\n(1) as the seekbar changes, it is needed to recreate the listview content with the proper tracklist. The adapter\'s notifyDataSetChanged() method would handle that.\n(2) to modify the tracklist it is needed to read the tracks and ratings from a file. A JSON file and its handling methods (JSONObject, getJSONArray, getJSONObject, getString, getInt) would handle this in the onProgressChanged() method, using the progress variable as a filter.\n(3) to avoid the continuous JSON parsing, the JSON file should be read at the beginning of the activity, store its data in an array and the search would be made on the array, not the JSON file itself. Accordingly the (2) would change to reflect this.\n(4) to handle the files, the File class is also important.</string>
    <string name="mindexplanation">Music for the mind section. With the slider the user can choose their mood between two states (want to work or want to relax). During playback (in the musicplayer section), they can set a heart/mind rating of the track, that is stored. When using this section, the app looks for tracks, those have the appropriate mind rating (+/-2 minds) and list them below. Tapping on one of them, starts the playback section. Tapping on the mind icon on the top, switches to the heart section.\nDifficulties/solutions:\n(1) as the seekbar changes, it is needed to recreate the listview content with the proper tracklist. The adapter\'s notifyDataSetChanged() method would handle that.\n(2) to modify the tracklist it is needed to read the tracks and ratings from a file. A JSON file and its handling methods (JSONObject, getJSONArray, getJSONObject, getString, getInt) would handle this in the onProgressChanged() method, using the progress variable as a filter.\n(3) to avoid the continuous JSON parsing, the JSON file should be read at the beginning of the activity, store its data in an array and the search would be made on the array, not the JSON file itself. Accordingly the (2) would change to reflect this.\n(4) to handle the files, the File class is also important.</string>
    <string name="listexplanation">The playlists section. During the playback, the user can add a track to a new or existing playlist. Those lists can be explored and selected here.\nDifficulties/solutions:\n(1) the playlists are stored in separated JSON files, and the list of playlists also, so a JSONObject and its methods should be used to retrieve those datas.\n(2) to handle the files, the File object is also important.</string>
    <string name="playexplanation">The musicplayer section. This is where the musics are played. The playlists are generated respectively to the user\'s selection from the splash screen. The mind and heart rating of a track can be set/changed by the seekbars, also a track can be added to a new/existing playlist by the floating action button. Tapping on the big logo image in the center should rotate through the playlist options (heart, mind, random, playlist) after the (>) button is tapped.\nDifficulties/solutions:\n(1) Adding the track to a new/existing playlist. This function involves both JSON writing and reading. The existing playlists\' list is stored in a JSON, and each playlist\' content (the tracks) is stored in a separate JSON. When the user is about to add a track to an exisiting list, the file, that stores the existing playlists\' list has to be parsed and displayed, then, when the playlist is selected, a new object has to be added to the selected playlist JSON file. When it\'s about a new playlist, a new JSON has to be created. These functions are executed by the JSONObject\'s parsing methods (JSONObject, getJSONArray, getJSONObject, getString, getInt) and the File class in the case of reading. When writing, the File, FileWriter, JSONObject classes and their methods make things work.\n(2) The mind and heart rating change. The bars\' changes are listened to in the onProgressChanged() method. If it changed, the modification has to be written back into the JSON file that stores the ratings of each track. The File, JSONObject and their methods is used in this case.\n(3) To make the music playback work the MediaPlayer and AudioManager classes have to be instantiated. When the playback of a track is ended, the next one from the tracklist must be started. setOnCompletionListener()/setNextMediaPlayer() should take care of that.\n(4) The next and previous buttons stop the current track playback and starts the previous/next track. The setNextMediaPlayer() should also be a solution for this.\n(5) When the MusicPlayer starts it receives parameters from its caller activity. Using those parameters, a playlist is generated in an array of object variable. During playback and the next/previous play that array is used.</string>
</resources>
